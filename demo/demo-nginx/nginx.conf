
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    etag off;# 开启etag，默认是开启的，这里为了演示暂时关闭

    ssi on;# 开启ssi
    ssi_silent_errors on; #开启后在处理SSI文件出错时不输出错误提示"[an error occurred while processing the directive]"。
    #ssi_types text/shtml; #ssi类型：默认值是text/html

	gzip on;# 开启gzip
	gzip_min_length 1k;# 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
	gzip_comp_level 2;# gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明
	gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript #image/jpeg image/gif image/png;# 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。
	gzip_vary on;# 是否在http header中添加Vary: Accept-Encoding，建议开启
	gzip_disable "MSIE [1-6]\.";# 禁用IE 6 gzip

    #使用webservers做负载均衡
    upstream webservers {
        server 127.0.0.1:250;
        server 127.0.0.1:438;
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #(1)使用nginx做http-server(虚拟目录)
        location /http-server {
            alias F:\demo-nginx\samples\(1)http-server;
            index index.html index.htm;
        }

        #(2)使用nginx做反向代理
        #location /{
        #    proxy_pass   http://localhost:3000/;
        #    proxy_set_header Host      $host;
        #    proxy_set_header X-Real-IP $remote_addr;
        #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #    proxy_buffering off;
        #}

        #(3)使用nginx做负载均衡
        #location / {
        #    proxy_pass http://webservers;
        #}
		
		#(4)使用nginx测试http缓存
        #location /http-cache {
        #    alias  F:\demo-nginx\samples\(4)http-cache;
		#    index  index.html index.htm;
        #    #expires 1d;
        #    add_header Cache-Control no-cache;
        #    add_header Cache-Control public;
        #}

        #(5)使用nginx测试ssi
        #location / {
        #    proxy_pass   http://127.0.0.1:8080;
        #    proxy_set_header Host      $host;
        #    proxy_set_header X-Real-IP $remote_addr;
        #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #    proxy_buffering off;
        #}

        #(6)使用nginx测试http-common，windows由于安装combo插件比较繁琐，暂时不掩饰此功能
        location /http-combo {
            alias  F:\demo-nginx\samples\(6)http-combo;

            #concat on; # nginx_concat_module 主开关 
            # concat_max_files 10; # 最大合并文件数    
            # concat_unique on; # 只允许同类型文件合并 
            # concat_types text/css; # 允许合并的文件类型，多个以逗号分隔。如：application/x-javascript, text/css 
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
